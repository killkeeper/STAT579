\documentclass{article}
\usepackage[margin=1in]{geometry}
\usepackage{amsmath, amssymb}
\usepackage{enumerate}
\usepackage{fancyhdr}
\usepackage{titlesec}
\usepackage{verbatim}
\usepackage{/usr/share/R/share/texmf/tex/latex/Sweave}
\SweaveOpts{pdf=TRUE,eps=FALSE}

\pagestyle{fancy}
\fancyhead[L]{STAT 579 HW3}
\fancyhead[R]{Xin Yin}
\titleformat{\section}{\em\Large} {$\dagger$ \thesection .}{10pt}{}

\begin{document}
    \section{}
    \begin{enumerate}[(a)]
    \item
    Delve into the dataset by reading it into R, specifying the delimiter to be the Tab. 
<<>>=
bill <- read.table("http://maitra.public.iastate.edu/stat579/datasets/senate-109.txt", sep="\t", header=T)
@
    \item 

    \begin{enumerate}[i.]
    \item
    Rename the verbose name to \verb=bill_type=, and use regular expression to truncate the full bill name to its type only. 
<<>>=
names(bill)[1] <- 'bill_type'
# Keep the bill type only
bill[,1] <- sub('^([^_]+)_.*', '\\1', bill[,1])
@
    \item
    And tabulate the numbers of each bill type,
<<>>=
bill.tbl <- table(bill[,1])
print(head(bill.tbl))
@
    and to visualize it,
<<fig=TRUE>>=
# Visualize the bill types
par(mar=c(12, 4.1, 4.1, 2.1))
plot(1:length(bill.tbl), bill.tbl, xaxt='n', typ='h', lwd=2,
    xlab='', ylab='Count of bill')
axis(1, at=1:length(bill.tbl), las=2, labels=names(bill.tbl),
    cex.axis=0.7)
axis(2)
@
    \end{enumerate}
    \item One good property of how this data was arranged is that, no matter you vote against or vote with a bill, you multiply your choice by itself always yields a 1. 
    Therefore, to do the matrix multiplication, $\mathbf{XX}'$
    will give us a matrix, whose diagnol terms $\mathbf{X}_{ii}$ are the sums of votes for each bill.

    To check if there's any discrepancy in the \verb=missing_votes= column, we examine this column vector with a vector transformed diagonal terms $100 - \text{diag}(\mathbf{XX}')$.

<<>>=
# Extract only the votes
vote <- as.matrix(bill[, 3:102])
# Perform matrix multiplication, which gives us a 441x441 matrix. The diagnol terms of this matrix is just the count of votes for each bill
vote.count <- diag(vote %*% t(vote))
# Check if we get the congruent missing counts
all(100 - vote.count == bill$missing_votes)
@
    Seems the data quality is pretty good and we can move on.

    \item To transform the matrix into one with relative votes with regard to the majority leaader, we first need to throw away those bills Senate Bill Frist didn't vote for.
<<>>=
# Construct a subset of data.frame including only bills Bill Frist voted for.
vote.senate <- subset(vote, vote[,100] != 0)
# Check if our subsetting is correct
dim(vote.senate)[1] == sum(abs(vote[,100]))
@
    We extract Senator Frist's vote as a vector $v_1$. We can leverage the fact that if I take a column vector $v_2$ from matrix \verb=vote.senate= iteratively, and perform arithmatic multiplication between the two vectors $v_1, v_2$, we can get a new vector $v_1'$ whose elements represent exactly the relative vote for the corresponding Senator with regard to Bill Frist's.
<<>>=
vote.leader <- vote.senate[,100]
# Note that vote.leader is a vector. If we column by column take the column vector from the matrix, and perform multiplication elementwise, we can get relative vote with regard to majority leader's vote for each senate as a column vector.

# Columnwise arithmatic multiplication on vector elements.
vote.relative <- vote.leader * vote.senate 
@
    Let's do some little experiment to check if this operation returns what we
    expected. We can compare the President's votes back to that time with Seator Bill Frist's,
<<>>=
vote.cmp <- cbind(vote.senate[1:5, 2], vote.senate[1:5, 100], vote.relative[1:5, 2])
colnames(vote.cmp) <- colnames(vote.senate)[c(2,100,2)]
vote.cmp
@
    Hmmm... Bipartisan politicians and their games. Well, at least we've done our job right and we're happy to move on.

    \item Now we are interested in for each bill, how many Senators voted with or against, and how many novoters are there at Capitol Hill. To do this, we use \verb=outer()= function to map the relative vote matrix into a 3-dimensional array. The values on the 3rd dimension is simply the set $\{-1, 0, 1\}$. So we will have three planes expanded on 1st and 2nd dimensions, each of them is a $438 \times 100$ matrix, whose values are logical \verb=TRUE='s and \verb=FALSE='s, indicating if a senator voted against/indifferently/with a bill or not.
<<>>=
# Map the relative vote matrix to a 3 dimensional array, where the 3rd dimension stores the votes as logical values with regard to vote against, indifferently, with respectively
vote.choice <- outer(vote.relative, -1:1, '==')
@
    Since we only care about how many people did what choices for a certain bill but not so much about who, we sum over the \verb=TRUE='s on 1st and 3rd dimension, which will end up with a $483 \times 3$ matrix. Each column of this matrix is the sum of votes for a certain bill under a particular choice (vote against, indifferently or vote with).
<<>>=
# Now aggregate the number of votes against/with or indifferently
# Apply summation on rows for three vote choices
vote.aggregated <- apply(vote.choice, MARGIN=c(1,3), FUN=sum)
# Now columns are summed counts with regards to vote against, indifferently and with.
@

    Well, so far, this matrix still doesn't make sense to us, because from the beginning, we have chopped away the bill names and IDs. We need to aggregate our counts again, grouping by the bill types and vote choices. To do this, we use the \verb=aggregate()= function to construct a \verb=data.frame= that contains the matched count of votes, bill types as well as vote choices.
    
<<>>=
# Construct a new data.frame, such that the count of votes, the bill type and the vote choice(against, with, indifferently) are matched
vote.tbl <- aggregate(as.vector(vote.aggregated),
       by=list(bill_type=rep(factor(bill[vote[,100] !=0 ,1]), times=3),
               choice=rep(factor(c('against', 'indifferently', 'with')), 
               each=dim(vote.aggregated)[1]
              )),
       FUN=sum)

# Rename the ugly 'x'
names(vote.tbl)[3] <- 'count'

print(head(vote.tbl))
@

    Ah, verbose numbers. So we again visualize this tabulated data, using a bar chart.
<<fig=TRUE>>=
# Visualize this data.frame using ggplot2
library(ggplot2)
p <- ggplot(vote.tbl, 
    aes(x=bill_type, y=count, fill=choice))
print(
p + opts(axis.text.x=theme_text(angle=-90, hjust=0)) +
    xlab('Bill Type') + ylab('Count of votes') + geom_bar()
)
@
    Well, yes, looking at this plot prompts many interesting questions and thoughts.
    For instance, budget bills are, unsurprisingly, a view into the bipartisan nature of Capitol Hill.
    And also the immigration, health issue bills etc etc.
    \end{enumerate}

    \include{prob2}
\end{document}
